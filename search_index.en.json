[{"url":"https://nbdevanandan.github.io/writeup/","title":"My Write-up's","body":"Welcome to my write-ups page, you can find all my CTF write-ups here. Mostly covers cryptography, reverse-engineering and the occasional OSINT.\n"},{"url":"https://nbdevanandan.github.io/","title":"Home","body":"\nCh4n7u\nHey there! I am Ch4n7u (aka Chantu, Devanandan).\nI’m an avid CTF player. Enjoys learning new stuff. Very much into tech. Loves nature and my culture. Mostly into cryptanalysis. You can find my write-ups and blogs here.\n\n\n\t\n\n\n"},{"url":"https://nbdevanandan.github.io/blog/","title":"My Blog","body":"Welcome to my blog, I jot down technical stuff, thoughts and opinions here.\n"},{"url":"https://nbdevanandan.github.io/blog/epoch/","title":"Epoch","body":"I had always wanted a blog site for myself. This need grew even more as I started playing CTFs and looked for a space to jot down my thought process of solving challenges. That’s the epoch of this site. Here’s the steps I took to set it up.\n\nTech Stack\nThere are many ways to set up a blog. You can manually code up the entire site yourselves in plain HTML, CSS and if needed JavaScript and then copy the template to create new blogs; this is what I initially did, however this takes up way too much time and effort. So then comes Static Site Generators(SSGs) like Jekyll, Hugo, Eleventy, Zola etc. which turn your markdown content into webpages which share a similar structure and theme. It usually also comes with many other features like automatic syntax highlighting for your code, automatic image compression etc. SSGs largely automates your workflow and make pushing blogs faster.\nI chose to host with Github Pages and go with Zola Static Site Generator, as it was\n\nrelatively new\nsingle binary (no dependency packages to install on your system, no compilation)\nfast (bonus: written in rust)\n\nThe other components I used in this site is as follows:\n\nDuckquill - A theme for zola with a lot of features including syntax highlighting, latex support etc.\nZola Deploy to Pages - GitHub action for deploying zola to GitHub-Pages.\n\n\nStep By Step Setup\n\nStep 1 - Setting Up Your Repository\n\n\nCreate your repository for the blog on GitHub. Your repository must be named &lt;USERNAME&gt;.github.io as is convention with GitHub Pages (or you can name your repository, say, blog which would appear at &lt;USERNAME&gt;.github.io/blog. This is usefull when you already have a main site).\n\n\nClone this repository to your local device and intialise your site with:\n\nThis will create a sub-directory &lt;BASE_DIR&gt; which is the source folder for your site.\n\n\nInstall Duckquill theme within the repository by creating a submodule. Visit Duckquill theme’s documentation for detailed steps.\n\nEdit your config.toml within &lt;BASE_DIR&gt; and add this line at the top:\n\n\n\nOptionally, add README.md, .gitignore and LICENSE files to your repository. I chose the CC BY-NC-SA 4.0 license as it seemed fit for my content; mostly writeups and technical blogs.\n\n\nNext step is to edit/extend the duckquill defaults to personalise your website. In my case, I extended the default footer to include the Creative-Commons license clause as well as modified the top nav-bar.\n\nThe theme’s footer template is located at &lt;BASE_DIR&gt;/themes/duckquill/templates/partial/footer.html. To override this, we copy the file onto &lt;BASE_DIR&gt;/templates/partial/footer.html. Checkout my GitHub to see the changes I made to footer.html to make it display the license clause.\nThe website’s appearance and link content on both top and bottom nav-bars are defined in the config.toml file. You can refer to the theme’s copy in &lt;BASE_DIR&gt;/themes/duckquill/config.toml to replicate it’s color scheme and edit the links/add new icons. It also contains plenty of other customisation options which you probably want to look at.\n\n\n\nNow is the time to push a blog or two. To do that simply create a new folder with the blog title in the &lt;BASE_DIR&gt;/content directory and write the contents within s README.md file inside.\n\n\nFinally to set up automatic deployment to github-pages, I used the Zola Deploy to Pages GitHub Action from GitHub Marketplace.Under your repository settings: Settings &gt; Actions &gt; General, in Workflow permissions, make sure that GITHUB_TOKEN has Read and Write permissions. Also under Settings &gt; Pages select Source as ‘Deploy from a branch’ and select branch as gh-pages.\n\n\n"}]